#!/bin/bash

# Author:: Phil Dibowitz <phild@fb.com> and David Martinez <ender@fb.com>
# Copyright:: Copyright (c) 2013-present Facebook
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script to feed chef with cookbooks and roles modified since the last SVN
# update.
#
# Notes: The script fails to update the rest if a cookbook has any syntax error.
# The good thing is that you have to fix the problem in SVN and it will fix
# itself in chef (svn up runs always, and before the upload).

# VARS
DRYRUN=0
DEBUG=0

PID_FILE='/var/run/grocery_delivery.pid'
MAX_PROC_AGE=800
STATUS_CODE=1
ENCODED_STATUS_MSG='Unknown+failure'

export MASTER_PATH='/var/chef/grocery_delivery_work'
export REPONAME='ops'
export COOKBOOK_PATHS=('chef/cookbooks')
export ROLES_PATH='chef/roles'
export REV_CHECKPOINT='gd_revision'
export KNIFE_CONFIG='/root/.chef/knife.rb'
export KNIFE='/opt/chef/bin/knife'
export VCS='/usr/bin/svn'
export REPO_URL VCS SVN GIT
ME=$(basename $0)

set -o pipefail

function call_knife() {
  $KNIFE $* -c $KNIFE_CONFIG
}

function log() {
  logger -t "$ME[$$]" "$*"
  if [ $DEBUG -eq 1 ] ; then
    echo $*
  fi
}

function debug() {
  if [ $DEBUG -eq 1 ]; then
    log "DEBUG: $*"
  fi
}

# General error handler.
function error() {
  STATUS_CODE=$1
  STATUS_MSG=$2
  log "Exiting with error ($STATUS_CODE): $STATUS_MSG"
  exit $STATUS_CODE
}

function find_and_source() {
  SFILE_NAME=$1
  shift
  for SDIR in $@; do
    SFILE="$SDIR/$SFILE_NAME"
    if [ -r $SFILE ]; then
      debug "Sourcing file: $SFILE"
      source $SFILE
      return 0
    fi
  done
  return 1
}

function clone_repository() {
  CMD=$(vcs_checkout_cmd ${REPO_URL} "${SERVICE_PATH}")
  OUT=$($CMD 2>&1) || error 1 "$CMD failed ($?): $OUT"
  OUT=$(echo 0 > $REV_CHECKPOINT_FULLPATH)
}

function update_repository() {
  CMD=$(vcs_cleanup_cmd $SERVICE_PATH)
  OUT=$($CMD 2>&1) || error 1 "$CMD failed ($?): $OUT"
  CMD=$(vcs_revert_cmd $SERVICE_PATH)
  OUT=$($CMD 2>&1) || error 2 "$CMD failed ($?): $OUT"
  CMD=$(vcs_update_cmd $SERVICE_PATH)
  OUT=$(cd $SERVICE_PATH && $CMD 2>&1) || error 3 "$CMD failed ($?): $OUT"
}

function update_cookbooks_and_roles() {
  if [ ! -f "$REV_CHECKPOINT_FULLPATH" ]; then
    REVNO=0
  elif [ $(wc -c < "$REV_CHECKPOINT_FULLPATH") -eq 0 ]; then
    # Note well, this cannot be a '-o' style or because the shell-expansion
    # will happen before the conditional and cause errors
    REVNO=0
  else
    REVNO=$(cat "$REV_CHECKPOINT_FULLPATH")
  fi
  if [ "$REVNO" -eq 0 ]; then
    # 'knife cookbook upload -a' uploads all your cookbooks.
    ADDED_COOKBOOK_LIST="-a"
    ADDED_ROLE_LIST=$(cd ${ROLES_FULLPATH} && find . -maxdepth 1 -type f | \
                      awk -F/ '{print $2}' | egrep '\.(rb|js|json)$')
  else
    # From now on, we'll see how the local HEAD (already updated) differs from
    # the last uploaded revision (REVNO).  We cannot do this against HEAD
    # because it'll issue a connection with the SVN server and it'll give us
    # potentially information "about the future", or in other words, we'll get
    # information about commit that we don't have locally.
    LOCAL_HEAD=$(vcs_local_head $SERVICE_PATH) \
      || error 4 "Couldn't get local HEAD revision ($?): $LOCAL_HEAD"

    # Now we get the added/deleted cookbook lists as follows:
    # - First, we get a list of all cookbooks with changes, including deletions
    # - Next, because we could have deleted a whole cookbook, we check if any
    #   of those cookbooks no longer exist (deleted cookbooks are guaranteed to
    #   show up in our ADDED_COOKBOOK_LIST)
    # - Finally, we take any deleted cookbooks off the added/modified list
    #   This has the advantage of working with both svn and git, since git will
    #   not tell you about directory deletions.
    ADDED_COOKBOOK_LIST=''
    DELETED_COOKBOOK_LIST=''
    for CB_PATH in ${COOKBOOK_FULLPATHS[@]}; do
      # Because we handle more than one directory, we need to make sure
      # that a delete from one directory doesn't cause us to nuke the CB
      # from the ADD list if that ADD was from a different directory.
      #
      # In other words if it gets moved from DIR1 to DIR2, but we happen
      # to process DIR2 first, we'd just delete the cookbook instead of
      # adding it, unless we track the dirs add/delete separately.
      LOCAL_ADDED_CBS=''
      LOCAL_DELETED_CBS=''
      if [ ! -d "${CB_PATH}" ] ; then
        debug "Skipping non-existent cookbook directory ${CB_PATH}"
        continue
      fi
      debug "Processing cookbook directory ${CB_PATH}"

      # Make a list of cookbook paths that are *not* the one we are currently
      # working on.  This way we don't treat any sub-paths as cookbook
      # directories
      declare -a OTHER_CB_PATHS=()
      for ANOTHER_CB_PATH in ${COOKBOOK_FULLPATHS[@]}; do
        if [ ! "$ANOTHER_CB_PATH" == "$CB_PATH" ]; then
          OTHER_CB_PATHS+=("$ANOTHER_CB_PATH")
        fi
      done

      ADDED_PATHS=($(
          cd ${CB_PATH} && \
          vcs_diff_summarize $REVNO $LOCAL_HEAD | \
          awk '/^[ADM]/ {print $NF}' | \
          awk -F/ '{print $1}' | \
          sort -u))
      for APATH in ${ADDED_PATHS[@]}; do
        TESTPATH="$CB_PATH/$APATH"
        # Ignore flat files... these cannot be cookbooks, and we want
        # to allow things like READMEs
        if [ -f "$TESTPATH" ]; then
          debug "Skipping $TESTPATH since it's a file"
          continue
        fi
        # Ignore directories that are just another CB path we will process
        for IGNORE in $OTHER_CB_PATHS; do
          debug "Comparing $TESTPATH to ignore path $IGNORE"
          if [[ $TESTPATH == $IGNORE ]]; then
            debug "Ignoring $TESTPATH as it's a sub-cookbook-path"
            continue 2
          fi
        done
        LOCAL_ADDED_CBS=$(echo -e "$APATH\n$LOCAL_ADDED_CBS")
      done
      for COOKBOOK in $LOCAL_ADDED_CBS; do
        if [ ! -d "$CB_PATH/$COOKBOOK" ]; then
          debug "$COOKBOOK is a deletion, so not treating it as an upload"
          LOCAL_DELETED_CBS=$(echo -e "$COOKBOOK\n$LOCAL_DELETED_CBS")
          # If we remove a cookbook, then we are most likely issuing a deletion
          # in cascade, which means that the cookbook could be in
          # LOCAL_ADDED_CBS too.
          LOCAL_ADDED_CBS=$(\
            echo "$LOCAL_ADDED_CBS" | grep -v "^${COOKBOOK}$")
        fi
      done

      # OK, now that we now the adds and deletes sorted out for this
      # directory we can append them to the global list
      ADDED_COOKBOOK_LIST=$(echo -e "$ADDED_COOKBOOK_LIST\n$LOCAL_ADDED_CBS")
      DELETED_COOKBOOK_LIST=$(
        echo -e "$DELETED_COOKBOOK_LIST\n$LOCAL_DELETED_CBS")
    done

    # Now, we could have things that showed up in both the ADDED and DELETED
    # lists. If so, they are being moved, so it's safe to remove them from
    # DELETED LIST. (Recall that if we both modified but nuked a given CB, we
    # would have caught that as only a delete above).
    for CB in $ADDED_COOKBOOK_LIST; do
      DELETED_COOKBOOK_LIST=$(echo "$DELETED_COOKBOOK_LIST" | grep -v "^${CB}$")
    done

    ADDED_ROLE_LIST=$(\
      cd ${ROLES_FULLPATH} && vcs_diff_summarize $REVNO $LOCAL_HEAD |\
      awk '/^[AM]/ {print $NF}' | egrep '\.(rb|json)$' | \
      sort -u)
    DELETED_ROLE_LIST=$(\
      cd ${ROLES_FULLPATH} && vcs_diff_summarize $REVNO $LOCAL_HEAD |\
      awk '/^D/ {print $NF}' | egrep '\.(rb|js|json)$' | \
      xargs -I+ basename + .rb | \
      sort -u)
  fi

  NEW_REV=$(vcs_latest_revision $SERVICE_PATH) \
    || error 4 "Couldn't get latest revision ($?): $NEW_REV"

  debug "Added cookbooks: $ADDED_COOKBOOK_LIST"
  debug "Removed cookbooks: $DELETED_COOKBOOK_LIST"
  debug "Added roles: $ADDED_ROLE_LIST"
  debug "Removed roles: $DELETED_ROLE_LIST"

  if [ -n "$ADDED_COOKBOOK_LIST" ]; then
    if [ "$ADDED_COOKBOOK_LIST" == "-a" ] ; then
      log "Uploading all cookbooks as of $NEW_REV"
    else
      log "Uploading cookbooks from $REVNO to $NEW_REV: $ADDED_COOKBOOK_LIST"
    fi
    if [ $DRYRUN -eq 0 ] ; then
      OUT=$(call_knife cookbook upload $ADDED_COOKBOOK_LIST 2>&1) \
          || error 5 "call_knife cookbook upload $ADDED_COOKBOOK_LIST \
                      failed ($?): $OUT"
    fi
  fi

  if [ -n "$DELETED_COOKBOOK_LIST" ]; then
    log "Deleting cookbooks from $REVNO to $NEW_REV: $DELETED_COOKBOOK_LIST"
    if [ $DRYRUN -eq 0 ] ; then
      for CB in $DELETED_COOKBOOK_LIST; do
        OUT=$(call_knife cookbook delete $CB -ay 2>&1) \
            || error 6 "call_knife cookbook delete $CB -ay failed ($?): $OUT"
      done
    fi
  fi

  if [ -n "$ADDED_ROLE_LIST" ] ; then
    log "Uploading roles from $REVNO to $NEW_REV: $ADDED_ROLE_LIST"
    if [ $DRYRUN -eq 0 ] ; then
      OUT=$(\
        cd ${ROLES_FULLPATH};\
        call_knife role from file $ADDED_ROLE_LIST 2>&1) || \
        error 7 "call_knife role from file $ADDED_ROLE_LIST failed ($?): $OUT"
    fi
  fi

  if [ -n "$DELETED_ROLE_LIST" ] ; then
    log "Deleting roles from $REVNO to $NEW_REV: $DELETED_ROLE_LIST"
    if [ $DRYRUN -eq 0 ] ; then
      for ROLE in $DELETED_ROLE_LIST; do
        OUT=$(cd ${ROLES_FULLPATH}; call_knife role delete $ROLE -y 2>&1) \
            || error 8 "call_knife role delete $ROLE -y failed ($?): $OUT"
      done
    fi
  fi

  # Save revision
  if [ $DRYRUN -eq 0 ] ; then
    echo $NEW_REV > $REV_CHECKPOINT_FULLPATH
  fi
}

function help() {
  echo "$ME

Chef uploader. Checks out from SVN and uploads changed roles and cookbooks to
the local system.

Options:
  -d    Debug. Print output to stdout in addition to logging.
  -h    Help. This message.
  -n    Dry-run. Don't actually upload.
"
}

debug 'startup'

gdhook_preflight_checks() { return; }
gdhook_exit_trap_commands() { return; }
gdhook_prerun() { return; }
gdhook_post_repo_up() { return; }
gdhook_postrun() { return; }

realpath=$(readlink -f $0)
ourdir=$(dirname $realpath)
ourfile=$(basename $realpath)

hookname='gd_local.hooks'
find_and_source $hookname $ourdir "$ourdir/gd_helpers" '/etc'

# User has had a chance to override stuff, put it all together
SERVICE_PATH="${MASTER_PATH}/${REPONAME}"
declare -a COOKBOOK_FULLPATHS
for CB_PATH in ${COOKBOOK_PATHS[@]}; do
  COOKBOOK_FULLPATHS+=("${SERVICE_PATH}/${CB_PATH}")
done
ROLES_FULLPATH="${SERVICE_PATH}/${ROLES_PATH}"
REV_CHECKPOINT_FULLPATH="${MASTER_PATH}/${REV_CHECKPOINT}"

gdhook_preflight_checks

while getopts 'dhn' opt; do
  case "$opt" in
    d)
      DEBUG=1
      ;;
    h)
      help
      exit 0
      ;;
    n)
      DRYRUN=1
      ;;
    *)
      echo "Invalid option '$opt'!"
      help
      exit 1
      ;;
  esac
done

# Multi-VCS support
VCS_NAME=$(basename $VCS)
find_and_source "gd_compat_$VCS_NAME" $ourdir "$ourdir/gd_helpers" '/etc' \
    || error 9 "Unsupported VCS ($VCS)"

LOCKFILE=/tmp/$ourfile.lock
if [ -f "$LOCKFILE" ]; then
  LOCK_EXISTS=1
else
  LOCK_EXISTS=0
fi

if lockfile -! -l $MAX_PROC_AGE -r 0 "$LOCKFILE"; then
  MESSAGE='Lockfile exists, exiting before doing any work.'
  echo $MESSAGE >&2
  logger -p user.warning -t "$ME[$$]" $MESSAGE
  exit
fi

if [ "$LOCK_EXISTS" -eq 1 ]; then
  log "Overriding $LOCKFILE, too old ($MAX_PROC_AGE seconds)."
  if [ -f "$PID_FILE" ]; then
    OLD_PROC=$(cat $PID_FILE)
    log "Killing old process $OLD_PROC."
    pkill -9 -P $OLD_PROC
    kill -9 $OLD_PROC
  fi
fi

echo $$ > $PID_FILE

debug 'lock acquired'

# determine any traps the user setup, then add ours
user_traps=$(gdhook_exit_trap_commands)
trapcmd="rm -f $LOCKFILE &>/dev/null"
if [ -n "$user_traps" ] ; then
  trapcmd="$user_traps ; $trapcmd"
fi
trap "$trapcmd" exit
trap exit INT

debug 'beginning work'

gdhook_prerun

if [ ! -d "$SERVICE_PATH" ]; then
  log "The $VCS_NAME repo in ${SERVICE_PATH} does not exist, cloning it."
  clone_repository
else
  update_repository
fi

debug 'repo synced, real work time'

gdhook_post_repo_up

update_cookbooks_and_roles
STATUS_CODE=0
STATUS_MSG="Success at $NEW_REV"
log "$STATUS_MSG"

gdhook_postrun
